NMDSplot <- ggplot(nmds_coords, aes(x = MDS1, y = MDS2, color = veg)) +
geom_point() +
labs(x = "NMDS1", y = "NMDS2", color = "Vegetation type") +
scale_color_manual(values = c("Lyngbya" = "blue", "Zostera" = "green")) + #choose the colours you want
theme_linedraw()
NMDSplot # view plot
## Save this "prettier" plot for your report
ggsave("example-NMDSplot.png", plot = NMDSplot, width = 10, height = 10, dpi = 300) # adjust size & resolution
NMDSplot <- ggplot(nmds_coords, aes(x = MDS1, y = MDS2, color = veg)) +
geom_point(size=5) +
labs(x = "NMDS1", y = "NMDS2", color = "Vegetation type") +
scale_color_manual(values = c("Lyngbya" = "blue", "Zostera" = "green")) + #choose the colors you want
theme()
NMDSplot # view plot
NMDSplot <- ggplot(nmds_coords, aes(x = MDS1, y = MDS2, color = veg)) +
geom_point(size=3) + # adjust size of points
labs(x = "NMDS1", y = "NMDS2", color = "Vegetation type") +
scale_color_manual(values = c("Lyngbya" = "blue", "Zostera" = "green")) + #choose the colors you want
theme()
NMDSplot # view plot
NMDSplot <- ggplot(nmds_coords, aes(x = MDS1, y = MDS2, color = veg)) +
geom_point(size=3) + # adjust size of points
labs(x = "NMDS1", y = "NMDS2", color = "Vegetation type") +
scale_color_manual(values = c("Lyngbya" = "blue", "Zostera" = "green")) + #choose the colors you want
theme(text = element_text(size = 12)) +
theme_linedraw()
NMDSplot # view plot
NMDSplot <- ggplot(nmds_coords, aes(x = MDS1, y = MDS2, color = veg)) +
geom_point(size=3) + # adjust size of points
labs(x = "NMDS1", y = "NMDS2", color = "Vegetation type") +
scale_color_manual(values = c("Lyngbya" = "blue", "Zostera" = "green")) + #choose the colors you want
theme(text = element_text(size = 18)) +
theme_linedraw()
NMDSplot # view plot
NMDSplot <- ggplot(nmds_coords, aes(x = MDS1, y = MDS2, color = veg)) +
geom_point(size=3) + # adjust size of points
labs(x = "NMDS1", y = "NMDS2", color = "Vegetation type") +
scale_color_manual(values = c("Lyngbya" = "blue", "Zostera" = "green")) + #choose the colors you want
theme(text = element_text(size = 20)) + # adjust text size
theme_linedraw()
NMDSplot # view plot
NMDSplot <- ggplot(nmds_coords, aes(x = MDS1, y = MDS2, color = veg)) +
geom_point(size=3) + # adjust size of points
labs(x = "NMDS1", y = "NMDS2", color = "Vegetation type") +
scale_color_manual(values = c("Lyngbya" = "blue", "Zostera" = "green")) + # choose the colors you want
theme(text = element_text(size = 20)) + # adjust text size
theme_linedraw()
NMDSplot # view plot
NMDSplot <- ggplot(nmds_coords, aes(x = MDS1, y = MDS2, color = veg)) +
geom_point(size=3) + # adjust size of points
labs(x = "NMDS1", y = "NMDS2", color = "Vegetation type") +
scale_color_manual(values = c("Lyngbya" = "blue", "Zostera" = "green")) + # choose the colors you want
theme(text = element_text(size = 5)) + # adjust text size
theme_linedraw()
NMDSplot # view plot
NMDSplot <- ggplot(nmds_coords, aes(x = MDS1, y = MDS2, color = veg)) +
geom_point(size=3) + # adjust size of points
labs(x = "NMDS1", y = "NMDS2", color = "Vegetation type") +
scale_color_manual(values = c("Lyngbya" = "blue", "Zostera" = "green")) + # choose the colors you want
theme(axis.text = element_text(size = 5)) + # adjust text size
theme_linedraw()
NMDSplot # view plot
NMDSplot <- ggplot(nmds_coords, aes(x = MDS1, y = MDS2, color = veg)) +
geom_point(size=3) + # adjust size of points
labs(x = "NMDS1", y = "NMDS2", color = "Vegetation type") +
scale_color_manual(values = c("Lyngbya" = "blue", "Zostera" = "green")) + # choose the colors you want
theme_linedraw()
theme(axis.text = element_text(size = 5))
NMDSplot +
theme(axis.text = element_text(size = 5))
NMDSplot +
theme(axis.text = element_text(size = 12))
NMDSplot +
theme(axis.text = element_text(size = 12)) + # edit text size
theme(axis.title = element_text(size = 18))
NMDSplot +
theme(axis.text = element_text(size = 12)) + # edit text size
theme(axis.title = element_text(size = 16))
NMDSplot +
theme(axis.text = element_text(size = 12)) + # edit text size
theme(axis.title = element_text(size = 16)) +
theme (legend.text = element_text(size = 16))
NMDSplot +
theme(axis.text = element_text(size = 12)) + # edit text size
theme(axis.title = element_text(size = 16)) +
theme(legend.text = element_text(size = 12)) +
theme(legend.title = element_text(size = 16))
## Save this "prettier" plot for your report
ggsave("example-NMDSplot.png", plot = NMDSplot, width = 6, height = 6, dpi = 300) # adjust size & resolution
## Save this "prettier" plot for your report
ggsave("example-NMDSplot.png", plot = NMDSplot, width = 8, height = 6, dpi = 300) # adjust size & resolution
read_excel("Stradbroke Data.xlsx")
dat <- read_excel("Stradbroke Data.xlsx")
df <- read_excel("Stradbroke Data.xlsx")
model1 <- glm(num ~ pH + time, data = df)
summary(model1)
install.packages("DHARMa")
library(DHARMa)
res <- simulateResiduals(model1)
plot(res)
model1 <- glm(num ~ pH + time, data = df, family = "poisson")
summary(model1)
res <- simulateResiduals(model1)
plot(res)
View(df)
model1 <- glm(num ~ pH + time, data = df, family = "binomial")
res <- simulateResiduals(model1)
plot(res)
model1 <- glm(num ~ pH + time, data = df, family = "possion")
model1 <- glm(num ~ pH*time, data = df, family = "poisson") # try diff. variables
summary(model1)
model2 <- glmm(num ~ time + (1|pH), data = df, family = "poisson") # try diff. variables
install.packages("glmmTMB")
library(glmmTMB)
model2 <- glmm(num ~ time + (1|pH), data = df, family = "poisson") # try diff. variables
model2 <- glmmTMB(num ~ time + (1|pH), data = df, family = "poisson") # try diff. variables
summary(model2)
res <- simulateResiduals(model1)
plot(res)
model2 <- glmmTMB(num ~ time + (1|pH), data = df, family = "poisson") # try diff. variables
summary(model2)
res2 <- simulateResiduals(model2)
plot(res2)
model2 <- glmmTMB(num ~ time, data = df, family = "poisson") # try diff. variables
summary(model2)
res2 <- simulateResiduals(model2)
plot(res2)
model2 <- glmmTMB(num ~ time + (1|temp), data = df, family = "poisson") # try diff. variables
summary(model2)
res2 <- simulateResiduals(model2)
plot(res2)
## Trying some glm models
model1 <- glm(num ~ temp*time, data = df, family = "poisson") # try diff. variables
summary(model1)
install.packages("DHARMa")
install.packages("DHARMa")
res <- simulateResiduals(model1)
plot(res)
## Trying some glm models
model1 <- glm(num ~ temp*time, data = df, family = "inverse") # try diff. variables
## Trying some glm models
model1 <- glm(num ~ temp*time, data = df, family = "gamma") # try diff. variables
## Trying some glm models
model1 <- glm(num ~ temp*time, data = df, family = "quasipoisson") # try diff. variables
summary(model1)
res <- simulateResiduals(model1)
plot(res)
## Test
# Example: glm_abundance <- glm(abundance ~ categorical_var + numerical_var, family = poisson, data = your_data)
plot(num)
mean(df$num)
var(df$num)
model1 <- glm(num ~ temp*pH*time, data = df, family = "quasipoisson") # try diff. variables
summary(model1)
res <- simulateResiduals(model1)
plot(res)
model1 <- glm(temp ~ pH*time, data = df, family = "quasipoisson") # try diff. variables
summary(model1)
res <- simulateResiduals(model1)
plot(res)
model1 <- glm(num ~ pH*time, data = df, family = "poisson") # try diff. variables
res <- simulateResiduals(model1)
plot(res)
plot(num ~ pH)
plot(num ~ pH, data = df)
model2 <- glm.nb(num ~ pH*time, data=df)
library(MASS)
model2 <- glm.nb(num ~ pH*time, data=df)
summary(model2)
res2 <- simulateResiduals(model2)
plot(res2)
model2 <- glm.nb(num ~ pH + time, data=df) # negative binomial
res2 <- simulateResiduals(model2)
plot(res2)
model2 <- glm.nb(num ~ pH, data=df) # negative binomial
summary(model2)
res2 <- simulateResiduals(model2)
plot(res2)
model3 <- glm(num ~ pH, family = "quasipoisson", data=df)
summary(model3)
res3 <- simulateResiduals(model3)
plot(res3)
res3 <- simulateResiduals(model3)
## Model 3
model3 <- glmmTMB(num ~ pH * time, family = "gamma", data=df)
## Model 3
model3 <- glmmTMB(num ~ pH * time, family = "Gamma", data=df)
## Model 3
model3 <- glmmTMB(num ~ pH + time, family = "Gamma", data=df)
summary(model3)
## Model 3
model3 <- glmmTMB(num ~ pH + time, family = "binomial", data=df)
model3 <- glmer(num ~ time + (1|pH), family = "poisson", data = df)
install.packages("glmer")
library(glmer)
## Model 3
install.packages("lmer")
library(lmer)
library(lme4)
model3 <- glmer(num ~ time + (1|pH), family = "poisson", data = df)
summary(model3)
plot(res3)
res3 <- simulateResiduals(model2)
res3 <- simulateResiduals(model3)
plot(res3)
model3 <- glmer(num ~ time + (1|pH), family = "quassipoisson", data = df)
model3 <- glmer(num ~ time + (1|pH), family = "quassipoisson", data = df)
model3 <- glmer(num ~ time + (1|pH), family = "quassipoisson", data = df)
model3 <- glmer(num ~ time + (1|temp) + (1|salinity) + (1|pH), family = "poisson", data = df)
model3 <- glmer(num ~ time + (1|temp) + (1|salinty) + (1|pH), family = "poisson", data = df)
summary(model3)
res3 <- simulateResiduals(model3)
plot(res3)
model3 <- glmer(num ~ time + organism + (1|temp) + (1|salinty) + (1|pH), family = "poisson", data = df)
summary(model3)
res3 <- simulateResiduals(model3)
plot(res3)
model3 <- glmer(num ~ time + organism + (1|pH), family = "poisson", data = df)
summary(model3)
res3 <- simulateResiduals(model3)
plot(res3)
library(lme4)
## Model 3
install.packages("lmer")
## Model 3
install.packages("lme4")
install.packages("lme4")
abundance_num <- subset(df, organism == "total")
model2 <- glmer(total ~ time + (1|pH), family = "poisson", data = abundance_num)
model2 <- glmer(num ~ time + (1|pH), family = "poisson", data = abundance_num)
summary(model2)
res3 <- simulateResiduals(model3)
plot(res3)
prawns <- subset(df, organims == 'prawn')
prawns <- subset(df, organism == 'prawn')
model4 <- glmer(num ~ time + (1|pH), family = "poisson", data = abundance_num)
summary(model4)
res4 <- simulateResiduals(model4)
plot(res4)
goby <- subset(df, organism == 'goby')
model5 <- glmer(num ~ time + (1|pH), family = "poisson", data = abundance_num)
summary(model5)
res5 <- simulateResiduals(model5)
plot(res5)
### Load and format data
data <- read_excel("vegetation-data.xlsx")
df <- as.data.frame(data)
matrix <- df %>%
tibble::column_to_rownames("sample") # make sure row names are unique
### Running an NMDS
mds <- metaMDS(matrix)
plot(mds) # simple plot
### Running adonis
adon.results <- adonis2(matrix ~ veg_df$vegetation, method="bray", perm=999)
print(adon.results) # model results - looks significant
### Make a more advanced plot
nmds_coords <- as.data.frame(mds$points)
veg <- factor(c("Zostera", "Zostera", "Zostera", "Zostera", "Lyngbya", "Lyngbya", "Lyngbya", "Lyngbya")) # add veg data as a new column
nmds_coords$veg <- veg
NMDSplot <- ggplot(nmds_coords, aes(x = MDS1, y = MDS2, color = veg)) +
geom_point(size=3) + # adjust size of points
labs(x = "NMDS1", y = "NMDS2", color = "Vegetation type") +
scale_color_manual(values = c("Lyngbya" = "blue", "Zostera" = "green")) + # choose the colors you want
theme_linedraw() # choose your favorite theme
NMDSplot +
theme(axis.text = element_text(size = 12)) + # edit text size
theme(axis.title = element_text(size = 16)) +
theme(legend.text = element_text(size = 12)) +
theme(legend.title = element_text(size = 16))
dat <- read_excel("data.xlsx")
## Format the data for plotting
dat1 <- dat[, c("organism", "num", "time")] #remove all unwanted columns
dat2 <- aggregate(num ~ organism + time, dat1, sum) #sum values
dat3 <- dat2 %>% filter(organism != "total")  #remove "total"
## Create a dodged bar plot
barplot <- ggplot(dat3, aes(x = organism, y = num, fill = time)) +
geom_bar(stat = "identity", position = "dodge")
barplot #view barplot
## Create a dodged bar plot
barplot <- ggplot(dat3, aes(x = organism, y = num, fill = time)) +
geom_bar(stat = "identity", position = "dodge") +
theme_classic()
barplot #view barplot
## Create a dodged bar plot
barplot <- ggplot(dat3, aes(x = organism, y = num, fill = time)) +
geom_bar(stat = "identity", position = "dodge") +
labs(y="Abundance", x="Taxa", fill="Time of Day") +
theme_classic()
barplot #view barplot
## Create a dodged bar plot
barplot <- ggplot(dat3, aes(x = organism, y = num, fill = time)) +
geom_bar(stat = "identity", position = "dodge") +
expand(ylim=c(9,200)) +
labs(y="Abundance", x="Taxa", fill="Time of Day") +
theme_classic()
## Create a dodged bar plot
barplot <- ggplot(dat3, aes(x = organism, y = num, fill = time)) +
geom_bar(stat = "identity", position = "dodge") +
coord_cartesian(ylim=c(9,200)) +
labs(y="Abundance", x="Taxa", fill="Time of Day") +
theme_classic()
barplot #view barplot
## Create a dodged bar plot
barplot <- ggplot(dat3, aes(x = organism, y = num, fill = time)) +
geom_bar(stat = "identity", position = "dodge") +
coord_cartesian(ylim=c(9,200)) +
labs(y="Abundance", x="Taxa", fill="Time of Day") +
scale_fill_manual(values = c("D" = "blue", "N" = "red"))
## Create a dodged bar plot
barplot <- ggplot(dat3, aes(x = organism, y = num, fill = time)) +
geom_bar(stat = "identity", position = "dodge") +
coord_cartesian(ylim=c(9,200)) +
labs(y="Abundance", x="Taxa", fill="Time of Day") +
scale_fill_manual(values = c("D" = "blue", "N" = "red")) +
theme_classic()
## Create a dodged bar plot
barplot <- ggplot(dat3, aes(x = organism, y = num, fill = time)) +
geom_bar(stat = "identity", position = "dodge") +
coord_cartesian(ylim=c(9,200)) +
labs(y="Abundance", x="Taxa", fill="Time of Day") +
scale_fill_manual(fill = c("N" = "blue", "D" = "yellow")) +
theme_classic()
## Create a dodged bar plot
barplot <- ggplot(dat3, aes(x = organism, y = num, fill = time)) +
geom_bar(stat = "identity", position = "dodge") +
coord_cartesian(ylim=c(9,200)) +
labs(y="Abundance", x="Taxa", fill="Time of Day") +
scale_fill_manual(values = c("N" = "blue", "D" = "yellow")) +
theme_classic()
barplot #view barplot
## Create a dodged bar plot
barplot <- ggplot(dat3, aes(x = organism, y = num, fill = time)) +
geom_bar(stat = "identity", position = "dodge") +
coord_cartesian(ylim=c(9,200)) +
labs(y="Abundance", x="Taxa", fill="Time of Day") +
scale_fill_manual(values = c("N" = "blue", "D" = "green")) +
theme_classic()
barplot #view barplot
## Model 2
abundance_num <- subset(df, organism == "total") # only use total abundance
## Create a dodged bar plot
barplot <- ggplot(dat3, aes(x = organism, y = num, fill = time)) +
geom_bar(stat = "identity", position = "dodge") +
coord_cartesian(ylim=c(9,200)) +
labs(y="Abundance", x="Taxa", fill="Time of Day") +
scale_fill_manual(values = c("N" = "blue", "D" = "green")) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme_classic()
barplot #view barplot
## Create a dodged bar plot
barplot <- ggplot(dat3, aes(x = organism, y = num, fill = time)) +
geom_bar(stat = "identity", position = "dodge") +
coord_cartesian(ylim=c(9,200)) +
labs(y="Abundance", x="Taxa", fill="Time of Day") +
scale_fill_manual(values = c("N" = "blue", "D" = "green")) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme_classic()
barplot #view barplot
barplot +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) # view barplot
barplot +
theme(axis.text.x = element_text(angle = 30, hjust = 1)) # view barplot
barplot +
theme(axis.text.x = element_text(angle = 20, hjust = 1)) # view barplot
barplot +
theme(axis.text.x = element_text(angle = 20, hjust = 2)) # view barplot
barplot +
theme(axis.text.x = element_text(angle = 20, hjust = 1)) # view barplot
barplot +
theme(axis.text.x = element_text(angle = 30, hjust = 1)) # view barplot
## Save barplot for report
ggsave("example-tidepool-barplot.png", plot = barplot, width = 10, height = 6, dpi = 300) #save in high-res for report
df3 <- data.frame(
Category = c("A", "B", "C", "D"),
Value1 = c(10, 15, 7, 12),
Value2 = c(8, 11, 5, 9)
)
ggplot(df3, aes(x = Category)) +
geom_bar(aes(y = Value1, fill = "Value1"), stat = "identity") +
geom_bar(aes(y = Value2, fill = "Value2"), stat = "identity") +
labs(x = "Category", y = "Value", fill = "Legend") +
scale_fill_manual(values = c("Value1" = "blue", "Value2" = "red")) +
theme_minimal()
example5 <- ggplot(df3, aes(x = Category, y = Value)) +
geom_boxplot(stat = "identity", position = "dodge") +
labs(x = "Category", y = "Value", fill = "Legend") +
scale_fill_manual(values = c("Value1" = "blue", "Value2" = "red")) +
theme_minimal()
example5
## Remove stacks & have them side by side
merged_df <- rbind(df$Value1, df$Value2) # merge Value1 and Value2 into a Value column
## Remove stacks & have them side by side
merged_df <- rbind(df3$Value1, df3$Value2) # merge Value1 and Value2 into a Value column
View(merged_df)
View(df3)
View(merged_df)
merged_df <- df3 %>%
pivot_longer(cols = c(Value1, Value2), names_to = "Category", values_to = "Value")
merged_df <- df3 %>%
pivot_longer(cols = c(Value1, Value2), values_to = "Value")
View(merged_df)
ggplot(merged_df, aes(x = Category, y = Value)) +
geom_bar(stat = "identity", position = "dodge") +
labs(x = "Category", y = "Value", fill = "Legend") +
scale_fill_manual(values = c("Value1" = "blue", "Value2" = "red")) +
theme_minimal()
ggplot(merged_df, aes(x = Category, y = Value, fill = name)) +
geom_bar(stat = "identity", position = "dodge") +
labs(x = "Category", y = "Value", fill = "Legend") +
scale_fill_manual(values = c("Value1" = "blue", "Value2" = "red")) +
theme_minimal()
## Remove stacks & have them side by side
merged_df <- df3 %>%
pivot_longer(cols = c(Value1, Value2), names_to = "Type", values_to = "Value") # just have 1 value column
View(merged_df)
ggplot(merged_df, aes(x = Category, y = Value, fill = Type)) +
geom_bar(stat = "identity", position = "dodge") +
labs(x = "Category", y = "Value", fill = "Legend") +
scale_fill_manual(values = c("Value1" = "blue", "Value2" = "red")) +
theme_minimal()
install.packages("gap")
install.packages("gap")
library(gap)
### Example 5 - boxplot ###
example5 <- ggplot(df3, aes(x = Category, y = Value)) +
geom_boxplot() +
labs(x = "Category", y = "Value", fill = "Legend") +
scale_fill_manual(values = c("Value1" = "blue", "Value2" = "red")) +
theme_minimal()
example5
### Example 5 - boxplot ###
example5 <- ggplot(merged_df, aes(x = Category, y = Value)) +
geom_boxplot() +
labs(x = "Category", y = "Value", fill = "Legend") +
scale_fill_manual(values = c("Value1" = "blue", "Value2" = "red")) +
theme_minimal()
example5
### Example 5 - boxplot ###
example5 <- ggplot(merged_df, aes(x = Category, y = Value, fill=Value)) +
geom_boxplot() +
labs(x = "Category", y = "Value", fill = "Legend") +
scale_fill_manual(values = c("Value1" = "blue", "Value2" = "red")) +
theme_minimal()
example5
### Example 5 - boxplot ###
example5 <- ggplot(merged_df, aes(x = Category, y = Value, color=Value)) +
geom_boxplot() +
labs(x = "Category", y = "Value", fill = "Legend") +
scale_fill_manual(values = c("Value1" = "blue", "Value2" = "red")) +
theme_minimal()
example5
### Example 5 - boxplot ###
example5 <- ggplot(merged_df, aes(x = Category, y = Value, color=Value)) +
geom_boxplot() +
labs(x = "Category", y = "Value", fill = "Legend")
example5
### Example 5 - boxplot ###
example5 <- ggplot(merged_df, aes(x = Category, y = Value, color=Type)) +
geom_boxplot() +
labs(x = "Category", y = "Value", fill = "Legend") +
scale_fill_manual(values = c("Value1" = "blue", "Value2" = "red")) +
theme_minimal()
example5
### Example 5 - boxplot ###
example5 <- ggplot(merged_df, aes(x = Category, y = Value)) +
geom_boxplot() +
labs(x = "Category", y = "Value", fill = "Legend") +
theme_minimal()
example5
example4 <- ggplot(merged_df, aes(x = Category, y = Value, fill = Type)) +
geom_bar(stat = "identity", position = "dodge") +
labs(x = "Category", y = "Value", fill = "Legend") +
scale_fill_manual(values = c("Value1" = "blue", "Value2" = "red")) +
theme_minimal()
example4
## Create a stacked barplot
example 4a <- ggplot(df3, aes(x = Category)) +
## Create a stacked barplot
example4a <- ggplot(df3, aes(x = Category)) +
geom_bar(aes(y = Value1, fill = "Value1"), stat = "identity") +
geom_bar(aes(y = Value2, fill = "Value2"), stat = "identity") +
labs(x = "Category", y = "Value", fill = "Legend") +
scale_fill_manual(values = c("Value1" = "blue", "Value2" = "red")) +
theme_minimal()
example4a
## Remove stacks & have them side by side
merged_df <- df3 %>%
pivot_longer(cols = c(Value1, Value2), names_to = "Type", values_to = "Value") # just have 1 value column
example4b <- ggplot(merged_df, aes(x = Category, y = Value, fill = Type)) +
geom_bar(stat = "identity", position = "dodge") +
labs(x = "Category", y = "Value", fill = "Legend") +
scale_fill_manual(values = c("Value1" = "blue", "Value2" = "red")) +
theme_minimal()
example4b
### Example 5 - boxplot ###
example5 <- ggplot(merged_df, aes(x = Category, y = Value)) +
geom_boxplot() +
labs(x = "Category", y = "Value", fill = "Legend") +
theme_minimal()
example5
### Save your fave plot(s) for your report
ggsave("example4a-barplot.png", example4a = barplot, width = 10, height = 6, dpi = 300) # adjust size & resolution
setwd("/Users/ilhabyrne/Documents/GitHub/uceap-examples-2023/examples")
### Save your fave plot(s) for your report
ggsave("example4a-barplot.png", example4a = barplot, width = 10, height = 6, dpi = 300) # adjust size & resolution
ggsave("example4b-barplot.png", example4b = barplot, width = 10, height = 6, dpi = 300) # adjust size & resolution
ggsave("example5-barplot.png", example5 = barplot, width = 10, height = 6, dpi = 300) # adjust size & resolution
ggsave("example5-boxplot.png", example5 = boxplot, width = 10, height = 6, dpi = 300) # adjust size & resolution
ggsave("example5-boxplot.png", example5, width = 10, height = 6, dpi = 300) # adjust size & resolution
ggsave("example4b-barplot.png", example4b, width = 10, height = 6, dpi = 300) # adjust size & resolution
### Save your fave plot(s) for your report
ggsave("example4a-barplot.png", example4a, width = 10, height = 6, dpi = 300) # adjust size & resolution
